#! /usr/bin/python

import signal
import sys
import time

from oslo.config import cfg

from kvm_monitor import data_stat
from kvm_monitor import heartbeat
from kvm_monitor import log

global_opts = [
    cfg.BoolOpt('enable_monitor',
               default=True,
               help='Enable vm monitor'),
    cfg.BoolOpt('enable_heartbeat',
               default=True,
               help='Enable reporting vm heartbeat'),
    cfg.IntOpt('heartbeat_delay',
               default=5,
               help='The interval seconds of reporting vm heartbeat'),
    cfg.IntOpt('monitor_delay',
               default=60,
               help='The interval seconds of collecting vm monitor data'),
    cfg.FloatOpt('check_interval',
                default=0.5,
                help='The interval time to check run thread or not'),
    ]

CONF = cfg.CONF
CONF.register_opts(global_opts)

LOG = log.getLogger(__name__)

RUN = True

def signal_handler(signum, frame):
    global RUN
    RUN = False
    heartbeat.HeartBeatThread.stop()
    data_stat.MonitorThread.stop()


# main loop for monitor data collecting
def main():
    LOG.info("Enable heartbeat: %s" % CONF.enable_heartbeat)
    LOG.info("Enable monitor: %s" % CONF.enable_monitor)

    heartbeat_thr = None
    if CONF.enable_heartbeat:
        heartbeat_thr = heartbeat.HeartBeatThread()

    data_stat_thr = None
    if CONF.enable_monitor:
        data_stat_thr = data_stat.MonitorThread()

    hb_thr = None
    ds_thr = None
    while RUN:
        # create the heartbeat thread
        if heartbeat_thr and (long(time.time()) -
                heartbeat_thr.last_run_time >= CONF.heartbeat_delay):
            if hb_thr is None or not hb_thr.is_alive():
                hb_thr = heartbeat_thr.start()
                heartbeat_thr.last_run_time = long(time.time())
            else:
                LOG.warn("heatbeat thread is still running after waiting %s" %
                        CONF.heartbeat_delay)

        # create the monitor data collect thread
        if data_stat_thr and (long(time.time()) -
                data_stat_thr.last_run_time >= CONF.monitor_delay):
            if ds_thr is None or not ds_thr.is_alive():
                ds_thr = data_stat_thr.start()
                data_stat_thr.last_run_time = long(time.time())
            else:
                LOG.warn("monitor thread is still running after waiting %s" %
                        CONF.monitor_delay)

        time.sleep(CONF.check_interval)

    still_run = False
    if hb_thr:
        hb_thr.join(1)
        if hb_thr.is_alive():
            still_run = True
            LOG.warn("heatbeat thread is still running")
    if ds_thr:
        ds_thr.join(1)
        if ds_thr.is_alive():
            still_run = True
            LOG.warn("monitor thread is still running")

    if still_run:
        # os.kill()
        pass


# main entry
if __name__ == "__main__":
    # signal handle
    signal.signal(signal.SIGTERM, signal_handler)
    signal.signal(signal.SIGINT, signal_handler)
    LOG.info("Start monitor")

    LOG.info("loading config files: %s" % sys.argv[2:])
    CONF(sys.argv[1:])

    main()
    LOG.info("Exit monitor")
